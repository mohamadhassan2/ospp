#------------------------------------------------------
def handle_syslog_message(raw_message, source_cfg):
    """
    Processes a raw Syslog message, applies pipeline transformations, and forwards it.
    Used by handle_udp_syslog() and handle_tcp_syslog()
    """
    pipeline_steps = source_cfg.get('pipeline', [])
    destinations = source_cfg.get('destinations', [])

    try:
        # Syslog messages are typically plain text, so we wrap them in a JSON structure
        data = {"syslog_message": raw_message.decode('utf-8')}
        transformed = pipeline.apply_pipeline(data, pipeline_steps)
        encoded = json.dumps(transformed).encode('utf-8')

        if not forward_to_destinations(encoded, destinations):
            write_to_cache(encoded, tag=source_cfg['name'])
    except Exception as e:
        print(f"[!] Error processing Syslog message: {e}")
        print_error_details(e)
# End of handle_syslog_message()
#------------------------------------------------------

#------------------------------------------------------
def handle_udp_syslog(server_sock, source_cfg):
    """
    Handles incoming Syslog messages over UDP.
    """
    print(f"[+] {source_cfg['name']} (UDP Syslog): Listening for incoming messages")

    while True:
        try:
            raw, addr = server_sock.recvfrom(4096)
            client_ip, client_port = addr
            print(f"[+] {source_cfg['name']} (UDP Syslog): Message received from {client_ip}:{client_port}")
            handle_syslog_message(raw, source_cfg)
        except Exception as e:
            print_error_details(e)
            print(f"[!] UDP Syslog socket error: {e}")
# End of handle_udp_syslog()
#------------------------------------------------------
#------------------------------------------------------
def handle_tcp_syslog_client(client_sock, addr, source_cfg):
    """
    Handles incoming Syslog messages over TCP.
    """
    client_ip, client_port = addr
    print(f"[+] {source_cfg['name']} (TCP Syslog): Connection from {client_ip}:{client_port}")

    try:
        while True:
            raw = client_sock.recv(4096)
            if not raw:
                break
            handle_syslog_message(raw, source_cfg)
    finally:
        client_sock.close()
        print(f"[-] Disconnected from {client_ip}:{client_port}")

# End of handle_tcp_syslog()
#------------------------------------------------------
